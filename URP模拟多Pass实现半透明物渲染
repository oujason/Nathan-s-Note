using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;

public class Ouzhisheng : ScriptableRendererFeature
{
    class CustomRenderPass : ScriptableRenderPass
    {
        FilteringSettings m_FilteringSettings;
        RenderStateBlock m_RenderStateBlock;
        List<ShaderTagId> m_ShaderTagIdList = new List<ShaderTagId>();
        string m_ProfilerTag;
        ProfilingSampler m_ProfilingSample;
        bool m_IsOpaque;

        static readonly int m_DrawOjectPassDataPropID = Shader.PropertyToID("_DrawObjectPassData");

        public CustomRenderPass(string profilerTag,bool opaque,RenderPassEvent evt, RenderQueueRange renderQueuerange,
            LayerMask layerMask,StencilState stencilState,int stencilReference )
        {
            m_ProfilerTag = profilerTag;
            m_ProfilingSample = new ProfilingSampler(profilerTag);
            m_ShaderTagIdList.Add(new ShaderTagId("BackFace"));
            renderPassEvent = evt;
            m_FilteringSettings = new FilteringSettings(renderQueuerange, layerMask);
            m_RenderStateBlock = new RenderStateBlock(RenderStateMask.Nothing);
            m_IsOpaque = opaque;

            if(stencilState.enabled)
            {
                m_RenderStateBlock.stencilReference = stencilReference;
                m_RenderStateBlock.mask = RenderStateMask.Stencil;
                m_RenderStateBlock.stencilState = stencilState;
            }


            
        }
        // This method is called before executing the render pass.
        // It can be used to configure render targets and their clear state. Also to create temporary render target textures.
        // When empty this render pass will render to the active camera render target.
        // You should never call CommandBuffer.SetRenderTarget. Instead call <c>ConfigureTarget</c> and <c>ConfigureClear</c>.
        // The render pipeline will ensure target setup and clearing happens in a performant manner.
        public override void OnCameraSetup(CommandBuffer cmd, ref RenderingData renderingData)
        {
        }

        // Here you can implement the rendering logic.
        // Use <c>ScriptableRenderContext</c> to issue drawing commands or execute command buffers
        // https://docs.unity3d.com/ScriptReference/Rendering.ScriptableRenderContext.html
        // You don't have to call ScriptableRenderContext.submit, the render pipeline will call it at specific points in the pipeline.
        public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
        {
            CommandBuffer cmd = CommandBufferPool.Get(m_ProfilerTag);
            using (new ProfilingScope(cmd, m_ProfilingSample))
            {
                //only use w for knowing whether the object is opaque(1) or alpha blended(0)
                Vector4 drawObjectPassData = new Vector4(0f, 0f, 0f, m_IsOpaque ? 1f : 0f);
                cmd.SetGlobalVector(m_DrawOjectPassDataPropID, drawObjectPassData);
                context.ExecuteCommandBuffer(cmd);
                cmd.Clear();
                Camera camera = renderingData.cameraData.camera;


                //renderpipeline写法：demonstrates how to obtain a CullingResults struct, 
                //and then pass it to ScriptableRenderContext.DrawRenderers.

                //camera.TryGetCullingParameters(out var cullparms);
                //CullingResults cullingResults = context.Cull(ref cullparms);
                //context.Submit();


                var sortFalgs = m_IsOpaque ? 
                    renderingData.cameraData.defaultOpaqueSortFlags : 
                    SortingCriteria.CommonTransparent;

                var drawSettings = CreateDrawingSettings(m_ShaderTagIdList, ref renderingData, sortFalgs);
                context.DrawRenderers(renderingData.cullResults, ref drawSettings, ref m_FilteringSettings,
                    ref m_RenderStateBlock);
            }
        }

        // Cleanup any allocated resources that were created during the execution of this render pass.
        public override void OnCameraCleanup(CommandBuffer cmd)
        {
        }
    }

    CustomRenderPass m_ScriptablePass;

    /// <inheritdoc/>
    public override void Create()
    {
        StencilStateData stencilData = new StencilStateData();
        StencilState m_defaultStencilState = StencilState.defaultValue;
        m_defaultStencilState.enabled = stencilData.overrideStencilState;
        m_defaultStencilState.SetCompareFunction(stencilData.stencilCompareFunction);
        m_defaultStencilState.SetPassOperation(stencilData.passOperation);
        m_defaultStencilState.SetFailOperation(stencilData.failOperation);
        m_defaultStencilState.SetZFailOperation(stencilData.zFailOperation);


        m_ScriptablePass = new CustomRenderPass(
            "Render Transparents",
            false, 
            RenderPassEvent.BeforeRenderingTransparents,            
            RenderQueueRange.opaque,
            LayerMask.NameToLayer("Role"),
            StencilState.defaultValue,
            1
            );

        // Configures where the render pass should be injected.
        m_ScriptablePass.renderPassEvent = RenderPassEvent.AfterRenderingOpaques;
    }

    // Here you can inject one or multiple render passes in the renderer.
    // This method is called when setting up the renderer once per-camera.
    public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
    {
        renderer.EnqueuePass(m_ScriptablePass);
    }
}


